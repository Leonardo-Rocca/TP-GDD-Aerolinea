--Nuevo esquema

CREATE SCHEMA [DBAS] AUTHORIZATION [gd];

-- DDL de tablas

CREATE TABLE DBAS.rutas (
	codigo_ruta bigint IDENTITY(1,1) PRIMARY KEY,
	codigo_ruta_original bigint,
	ciudad_origen_id bigint,
	ciudad_destino_id bigint,
	precio_base_por_KG float(24),
	precio_base_por_pasaje float(24),
	id_servicio bigint
);

CREATE TABLE DBAS.viajes (
	id_viaje bigint IDENTITY(1,1) PRIMARY KEY,
	fecha_salida datetime,
	fecha_llegada datetime,
	fecha_llegada_estimada datetime,
	matricula_aeronave varchar(100),
	codigo_ruta bigint,
	CHECK( (fecha_llegada_estimada <= DATEADD(day, 1, fecha_salida)) AND (fecha_salida < fecha_llegada))
);

CREATE TABLE DBAS.aeronaves (
	matricula_aeronave varchar(100) PRIMARY KEY,
	numero_aeronave bigint IDENTITY(1,1) UNIQUE,
	modelo_aeronave varchar(100),
	baja_fuera_de_servicio tinyint default 0,
	baja_vida_util tinyint default 0,
	fecha_reinsercion datetime,
	fecha_baja_servicio_definitiva datetime,
	kg_disponible_encomienda float(24),
	cantidad_butacas bigint,
	id_fabricante bigint,
 	id_servicio bigint

);

CREATE TABLE DBAS.fabricantes (
	id_fabricante bigint IDENTITY(1,1) PRIMARY KEY,
	nombre_fabricante varchar(50)

);

CREATE TABLE DBAS.butacas (
	id_butaca bigint IDENTITY(1,1) PRIMARY KEY,
	numero_butaca smallint,
	tipo_butaca varchar(15) CHECK(tipo_butaca IN('Pasillo','Ventanilla','0')),
	piso_butaca tinyint,
	matricula_aeronave varchar(100),
	UNIQUE(numero_butaca, matricula_aeronave)
);

CREATE TABLE DBAS.pasajesEncomiendas (
	codigo_PE bigint PRIMARY KEY,
	id_cliente  bigint,
	encomienda_cliente_KG float(24),
	id_viaje bigint NOT NULL,
	id_butaca bigint,
	id_compra bigint NOT NULL,
	
);

CREATE TABLE DBAS.servicios (
	id_servicio bigint IDENTITY(1,1) PRIMARY KEY,
	porcentaje_arancel float(24),
	tipo_servicio varchar(50)
);

CREATE TABLE DBAS.compras (
	id_compra bigint IDENTITY(1,1) PRIMARY KEY,
	PNR bigint UNIQUE, -- codigo de compra
	fecha_compra_pasaje datetime NOT NULL,
	fecha_compra_encomienda datetime NOT NULL,
	precio_encomienda float(24),
	precio_pasaje float(24),
	id_cliente bigint
	
);

CREATE TABLE DBAS.roles (
	id_rol bigint IDENTITY(1,1) PRIMARY KEY,
	descripcion varchar(100)
);

CREATE TABLE DBAS.rolesPorFuncionalidad (
	id_rol bigint NOT NULL,
	id_funcionalidad bigint NOT NULL,
);

CREATE TABLE DBAS.funcionalidades (
	id_funcionalidad bigint IDENTITY(1,1) PRIMARY KEY,
	descripcion varchar(100)
);


CREATE TABLE DBAS.cancelaciones (
	id_cancelacion bigint IDENTITY(1,1) PRIMARY KEY,
	codigo_cancelacion bigint UNIQUE,
	fecha_devolucion datetime,
	PNR bigint UNIQUE,
	motivo_cancelacion varchar(100),
	codigo_pasaje bigint,
	codigo_encomienda bigint
	
);

CREATE TABLE DBAS.usuarios (
	id_usuario bigint IDENTITY(1,1) PRIMARY KEY,
	username varchar(50) UNIQUE,
	password varchar(50),
	id_rol bigint
);

CREATE TABLE DBAS.ciudades (
	id_ciudad bigint IDENTITY(1,1) PRIMARY KEY,
	nombre_ciudad varchar(100)
);

CREATE TABLE DBAS.clientes (
	id_cliente bigint IDENTITY(1,1) PRIMARY KEY,
	dni_cliente bigint,
	nombre_cliente varchar(100),
	apellido_cliente varchar(100),
	direccion_cliente varchar(100),
	telefono_cliente varchar(50),
	mail_cliente varchar(100),
	fecha_nacimiento datetime,
	millas_totales bigint,
	id_millas bigint
);

CREATE TABLE DBAS.canjes (
	id_canje bigint IDENTITY(1,1) PRIMARY KEY,
	id_cliente bigint,
	fecha_canje datetime,
	cantidad_producto bigint,
	millas_usadas bigint,
	id_producto bigint
	
);

CREATE TABLE DBAS.millas (
	id_millas bigint IDENTITY(1,1) PRIMARY KEY,
	valor_millas bigint,
	validez_millas int default 365,
	detalle_millas_realizadas varchar(100),
	
);

CREATE TABLE DBAS.productos (
	id_producto bigint IDENTITY(1,1) PRIMARY KEY,
	valor_en_milas int,
	nombre_producto varchar(100),
	stock int
);

CREATE TABLE DBAS.periodosFueraDeServicio (
	id_periodo bigint IDENTITY(1,1) PRIMARY KEY,
	matricula_aeronave varchar(100),
	fecha_fuera_servicio datetime,
	fecha_reinicio_servicio datetime
);

--DDL de constraints compuestos

alter table DBAS.rolesPorFuncionalidad add constraint pk_rolesPorFuncionalidad 
	primary key clustered (id_rol, id_funcionalidad);

-- DDL de constraints FK

alter table DBAS.rutas add constraint fk_ruta_ciudadOrigen 
	foreign key (ciudad_origen_id) references DBAS.ciudades (id_ciudad);

alter table DBAS.rutas add constraint fk_ruta_ciudadDestino 
	foreign key (ciudad_destino_id) references DBAS.ciudades (id_ciudad);

alter table DBAS.rutas add constraint fk_ruta_servicio 
	foreign key (id_servicio) references DBAS.servicios (id_servicio);

alter table DBAS.viajes add constraint fk_viaje_aeronave 
	foreign key (matricula_aeronave) references DBAS.aeronaves (matricula_aeronave);	

alter table DBAS.viajes add constraint fk_viaje_ruta
	foreign key (codigo_ruta) references DBAS.rutas (codigo_ruta);

alter table DBAS.aeronaves add constraint fk_aeronave_fabricante
	foreign key (id_fabricante) references DBAS.fabricantes (id_fabricante); 
	
alter table DBAS.aeronaves add constraint fk_aeronave_servicio
	foreign key (id_servicio) references DBAS.servicios (id_servicio); 

alter table DBAS.butacas add constraint fk_butaca_aeronave
	foreign key (matricula_aeronave) references DBAS.aeronaves (matricula_aeronave);

alter table DBAS.pasajesEncomiendas add constraint fk_pasaje_cliente
	foreign key (id_cliente ) references DBAS.clientes (id_cliente); 

alter table DBAS.pasajesEncomiendas add constraint fk_pasaje_butaca
	foreign key (id_butaca) references DBAS.butacas (id_butaca);

alter table DBAS.pasajesEncomiendas add constraint fk_pasaje_compra
	foreign key (id_compra) references DBAS.compras (id_compra);

alter table DBAS.pasajesEncomiendas add constraint fk_pasaje_viaje
	foreign key (id_viaje) references DBAS.viajes (id_viaje);

alter table DBAS.compras add constraint fk_compra_cliente
	foreign key (id_cliente ) references DBAS.clientes (id_cliente);

alter table DBAS.cancelaciones add constraint fk_cancelacion_pasaje
	foreign key (codigo_pasaje) references DBAS.pasajesEncomiendas (codigo_PE);

alter table DBAS.cancelaciones add constraint fk_cancelacion_encomienda
	foreign key (codigo_encomienda) references DBAS.pasajesEncomiendas (codigo_PE);

alter table DBAS.cancelaciones add constraint fk_cancelacion_compra
	foreign key (id_compra_PNR) references DBAS.compras (id_compra_PNR);

alter table DBAS.clientes add constraint fk_cliente_millas
	foreign key (id_millas) references DBAS.millas (id_millas);

alter table DBAS.canjes add constraint fk_canje_cliente
	foreign key (id_cliente) references DBAS.clientes (id_cliente);

alter table DBAS.canjes add constraint fk_canje_producto
	foreign key (id_producto) references DBAS.productos (id_producto);

alter table DBAS.periodosFueraDeServicio add constraint fk_periodos_aeronave
	foreign key (matricula_aeronave) references DBAS.aeronaves (matricula_aeronave);	

alter table DBAS.usuarios add constraint fk_usuario_rol
	foreign key (id_rol) references DBAS.roles (id_rol);

alter table DBAS.rolesPorFuncionalidad add constraint fk_rolesPorFuncionalidad_rol
	foreign key (id_rol) references DBAS.roles (id_rol);

alter table DBAS.rolesPorFuncionalidad add constraint fk_rolesPorFuncionalidad_funcionalidad
	foreign key (id_funcionalidad) references DBAS.funcionalidades (id_funcionalidad);

--Migracion

SELECT * FROM gd_esquema.Maestra

INSERT INTO DBAS.fabricantes(nombre_fabricante)
SELECT DISTINCT Aeronave_Fabricante 
FROM gd_esquema.Maestra

---

INSERT INTO DBAS.ciudades(nombre_ciudad)
SELECT DISTINCT Ruta_Ciudad_Origen FROM gd_esquema.Maestra UNION SELECT DISTINCT Ruta_Ciudad_Destino FROM gd_esquema.Maestra

---

INSERT INTO DBAS.servicios(tipo_servicio)
SELECT DISTINCT Tipo_Servicio FROM gd_esquema.Maestra

---

CREATE TABLE #temporalRutasOriginales(nom_ruta_orig varchar(100), nom_ruta_dest varchar(100), ruta_PP float(24), ruta_PKG float(24), ruta_servicio varchar(50))

INSERT INTO #temporalRutasOriginales(nom_ruta_orig, nom_ruta_dest, ruta_PP, ruta_PKG, ruta_servicio)
SELECT DISTINCT tablaAux1.Ruta_Ciudad_Origen, tablaAux1.Ruta_Ciudad_Destino, tablaAux2.Ruta_Precio_BaseKG, tablaAux1.Ruta_Precio_BasePasaje, tablaAux1.Tipo_Servicio
		FROM ((SELECT DISTINCT Ruta_Codigo, Ruta_Ciudad_Origen, Ruta_Ciudad_Destino,Ruta_Precio_BasePasaje, Tipo_Servicio FROM gd_esquema.Maestra WHERE Ruta_Precio_BasePasaje > 0.00) tablaAux1
			JOIN (SELECT DISTINCT Ruta_Codigo,Ruta_Ciudad_Origen, Ruta_Ciudad_Destino,Ruta_Precio_BaseKG, Tipo_Servicio FROM gd_esquema.Maestra WHERE Ruta_Precio_BASEKG > 0.00) tablaAux2
				ON (tablaAux1.Ruta_Ciudad_Origen = tablaAux2.Ruta_Ciudad_Origen AND tablaAux1.Ruta_Ciudad_Destino = tablaAux2.Ruta_Ciudad_Destino))


INSERT INTO DBAS.rutas(ciudad_origen_id, ciudad_destino_id, precio_base_por_KG, precio_base_por_pasaje, id_servicio)
SELECT tablaCiudades_orig.id_ciudad, tablaCiudades_dest.id_ciudad, tmpRutas.ruta_PKG, tmpRutas.ruta_PP, tablaServicios.id_servicio
FROM ((SELECT * FROM DBAS.ciudades) tablaCiudades_orig 
	JOIN  #temporalRutasOriginales tmpRutas ON ( tmpRutas.nom_ruta_orig = tablaCiudades_orig.nombre_ciudad)
		JOIN (SELECT * FROM DBAS.ciudades) tablaCiudades_dest ON ( tmpRutas.nom_ruta_dest = tablaCiudades_dest.nombre_ciudad) 
			JOIN (SELECT * FROM DBAS.servicios) tablaServicios ON (tmpRutas.ruta_servicio = tablaServicios.tipo_servicio))

---

-- sirve para saber si hay consistencia con el tipo de servicio de la aeronave
SELECT DISTINCT aux1.Aeronave_matricula, aux1.Aeronave_KG_Disponibles, aux1.Aeronave_Fabricante, aux1.Tipo_Servicio 
FROM ((SELECT Aeronave_matricula, Aeronave_KG_Disponibles, Aeronave_Fabricante, Tipo_Servicio FROM gd_esquema.Maestra) aux1 JOIN (SELECT Aeronave_matricula, Aeronave_KG_Disponibles, Aeronave_Fabricante, Tipo_Servicio FROM gd_esquema.Maestra) aux2 
ON (aux1.Aeronave_Matricula = aux2.Aeronave_Matricula AND aux1.Tipo_Servicio != aux2.Tipo_Servicio)) 

-- sirve para saber si hay consistencia con kg disponibles
SELECT DISTINCT aux1.Aeronave_matricula, aux1.Aeronave_KG_Disponibles, aux1.Aeronave_Fabricante, aux1.Tipo_Servicio 
FROM ((SELECT Aeronave_matricula, Aeronave_KG_Disponibles, Aeronave_Fabricante, Tipo_Servicio FROM gd_esquema.Maestra) aux1 JOIN (SELECT Aeronave_matricula, Aeronave_KG_Disponibles, Aeronave_Fabricante, Tipo_Servicio FROM gd_esquema.Maestra) aux2 
ON (aux1.Aeronave_Matricula = aux2.Aeronave_Matricula AND aux1.Aeronave_KG_Disponibles != aux2.Aeronave_KG_Disponibles)) 

INSERT INTO DBAS.aeronaves(matricula_aeronave, modelo_aeronave, kg_disponible_encomienda, id_fabricante, id_servicio)
SELECT DISTINCT tablaAux.Aeronave_Matricula, tablaAux.Aeronave_Modelo, tablaAux.Aeronave_KG_Disponibles, tablaFab.id_fabricante, tablaServ.id_servicio
FROM ((SELECT Aeronave_matricula, Aeronave_KG_Disponibles, Aeronave_Fabricante, Aeronave_Modelo, Tipo_Servicio FROM gd_esquema.Maestra) tablaAux
	JOIN DBAS.fabricantes tablaFab ON (tablaFab.nombre_fabricante = tablaAux.Aeronave_Fabricante)
		JOIN DBAS.servicios tablaServ ON (tablaServ.tipo_servicio = tablaAux.Tipo_Servicio))

---

INSERT INTO DBAS.viajes (fecha_salida,fecha_llegada_estimada,fecha_llegada,matricula_aeronave,codigo_ruta)
SELECT DISTINCT tablaAux.FechaSalida, tablaAux.Fecha_LLegada_Estimada, tablaAux.FechaLLegada, tablaAux.Aeronave_Matricula, tablaRutas.codigo_ruta
FROM ((SELECT FechaSalida, Fecha_LLegada_Estimada, FechaLLegada, Aeronave_Matricula, Ruta_Ciudad_Origen, Ruta_Ciudad_Destino FROM gd_esquema.Maestra) tablaAux 
	JOIN DBAS.ciudades tablaciudad_orig ON (tablaciudad_orig.nombre_ciudad= tablaAux.Ruta_Ciudad_Origen)
		JOIN DBAS.ciudades tablaciudad_dest ON (tablaciudad_dest.nombre_ciudad = tablaAux.Ruta_Ciudad_Destino)
			JOIN DBAS.rutas tablaRutas ON (tablaRutas.ciudad_origen_id = tablaciudad_orig.id_ciudad AND tablaRutas.ciudad_destino_id = tablaciudad_dest.id_ciudad))

---

INSERT INTO DBAS.butacas (numero_butaca, tipo_butaca, piso_butaca, matricula_aeronave)
SELECT DISTINCT Butaca_Nro, Butaca_Tipo, Butaca_Piso, Aeronave_Matricula FROM gd_esquema.Maestra

---

INSERT INTO DBAS.clientes(dni_cliente, nombre_cliente, apellido_cliente, direccion_cliente, telefono_cliente, mail_cliente, fecha_nacimiento)
SELECT DISTINCT Cli_Dni, Cli_Nombre, Cli_Apellido, Cli_Dir, Cli_Telefono, Cli_Mail, Cli_Fecha_Nac FROM gd_esquema.Maestra

---

INSERT INTO DBAS.compras(fecha_compra_pasaje, fecha_compra_encomienda, precio_pasaje, precio_encomienda, id_cliente)
SELECT tablaAux.Pasaje_FechaCompra, tablaAux.Paquete_FechaCompra, tablaAux.Pasaje_Precio, tablaAux.Paquete_Precio, tablaCliente.id_cliente 
	FROM ((SELECT id_cliente,dni_cliente, nombre_cliente, apellido_cliente FROM DBAS.clientes) tablaCliente
		JOIN (SELECT  Cli_Dni, Cli_Apellido, Cli_Nombre, Pasaje_FechaCompra, Paquete_FechaCompra, Pasaje_Precio, Paquete_Precio FROM gd_esquema.Maestra) tablaAux
			ON (tablaCliente.dni_cliente = tablaAux.Cli_Dni AND tablaCliente.nombre_cliente = tablaAux.Cli_Nombre AND tablaCliente.apellido_cliente = tablaAux.Cli_Apellido))

--- Falta pasajes, se implementara trigger y cursores